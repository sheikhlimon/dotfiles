#!/bin/bash

# sudo pacman -S zsh
# chmod +x ~/post_install
# ~./post_install

# Function to install missing zsh plugins
install_oh_my_zsh() {
  # Define ZSH and ZSH_CUSTOM paths
  ZSH="${ZSH:-$HOME/.oh-my-zsh}"
  ZSH_CUSTOM="${ZSH_CUSTOM:-$ZSH/custom}"

  # Install Oh My Zsh if not already installed
  if [[ ! -d "$ZSH" ]]; then
    echo "Installing Oh My Zsh..."
    RUNZSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  else
    echo "Oh My Zsh already installed at $ZSH"
  fi

  # Plugins to install
  local plugins=(
    "https://github.com/zsh-users/zsh-autosuggestions"
    "https://github.com/zsh-users/zsh-syntax-highlighting"
  )

  # Create custom plugin directory if missing
  mkdir -p "$ZSH_CUSTOM/plugins"

  # Clone plugins if missing
  for url in "${plugins[@]}"; do
    local name=$(basename "$url")
    local plugin_dir="$ZSH_CUSTOM/plugins/$name"

    if [[ ! -d "$plugin_dir" ]]; then
      echo "Installing plugin: $name"
      git clone "$url" "$plugin_dir"
    else
      echo "Plugin $name already installed"
    fi
  done
}

install_zshrc_support() {
  if [[ -f /etc/arch-release ]]; then
    echo "Detected Arch Linux"
    yay -S --needed multitail eza fd bat yazi fzf zoxide trash-cli tree duf

  elif [[ -f /etc/debian_version ]]; then
    echo "Detected Debian-based system"
    sudo apt update
    sudo apt install -y multitail eza fd bat fzf zoxide trash-cli tree duf

    # Optional: Install `yazi` if it's not in apt (available via cargo or deb)
    if ! command -v yazi &>/dev/null; then
      echo "yazi not found in apt; installing from GitHub..."
      tmp_dir=$(mktemp -d)
      (
        cd "$tmp_dir"
        curl -LO https://github.com/sxyazi/yazi/releases/latest/download/yazi_amd64.deb
        sudo dpkg -i yazi_amd64.deb
      )
      rm -rf "$tmp_dir"
    fi

  else
    echo "Unsupported OS â€” only Arch and Debian-based systems are supported for now."
  fi
}

install_my_apps() {
  # Define apps to install
  local arch_official=(
    kitty
    mpv
    okular
    neovim
    haruna
    mise
  )

  local arch_aur=(
    visual-studio-code-bin
    mongodb-compass-bin
    postman-bin
    foliate
    ghostty
    zen-browser-bin
    vivaldi
    telegram-desktop-bin
  )

  local debian_official=(
    kitty
    discord
    telegram-desktop
    mpv
    okular
    neovim
    haruna
    vivaldi
  )

  # Snap apps (Debian)
  local debian_snap_apps=(
    code
    postman
    zoom-client
    protonvpn
  )

  # Helper to check and install packages on Arch
  install_arch_pkgs() {
    local pkg_list=("$@")
    local to_install=()
    for pkg in "${pkg_list[@]}"; do
      if ! pacman -Qi "$pkg" &>/dev/null && ! yay -Qi "$pkg" &>/dev/null; then
        to_install+=("$pkg")
      else
        echo "$pkg already installed."
      fi
    done

    if [[ ${#to_install[@]} -gt 0 ]]; then
      echo "Installing Arch packages: ${to_install[*]}"
      sudo pacman -S --needed "${to_install[@]}"
    fi
  }

  # Helper to install AUR packages with yay
  install_arch_aur_pkgs() {
    local aur_list=("$@")
    for pkg in "${aur_list[@]}"; do
      if ! yay -Qi "$pkg" &>/dev/null; then
        echo "Installing AUR package: $pkg"
        yay -S --needed "$pkg"
      else
        echo "AUR package $pkg already installed."
      fi
    done
  }

  # Helper to check and install Debian packages
  install_debian_pkgs() {
    local pkgs=("$@")
    local to_install=()
    for pkg in "${pkgs[@]}"; do
      if ! dpkg -s "$pkg" &>/dev/null; then
        to_install+=("$pkg")
      else
        echo "$pkg already installed."
      fi
    done

    if [[ ${#to_install[@]} -gt 0 ]]; then
      echo "Installing Debian packages: ${to_install[*]}"
      sudo apt install -y "${to_install[@]}"
    fi
  }

  # Helper to install snap apps if snap exists
  install_snap_apps() {
    if ! command -v snap &>/dev/null; then
      echo "snap not found, installing snapd..."
      sudo apt install -y snapd
      sudo systemctl enable --now snapd.socket
    fi

    for snap_app in "${debian_snap_apps[@]}"; do
      if ! snap list | grep -q "^$snap_app "; then
        echo "Installing snap app: $snap_app"
        sudo snap install "$snap_app" --classic 2>/dev/null || sudo snap install "$snap_app" 2>/dev/null
      else
        echo "Snap app $snap_app already installed."
      fi
    done
  }

  echo "Updating package lists..."

  if [[ -f /etc/arch-release ]]; then
    echo "Detected Arch Linux"
    sudo pacman -Syu --needed

    install_arch_pkgs "${arch_official[@]}"
    install_arch_aur_pkgs "${arch_aur[@]}"

  elif [[ -f /etc/debian_version ]]; then
    echo "Detected Debian/Ubuntu"
    sudo apt update
    install_debian_pkgs "${debian_official[@]}"
    install_snap_apps

  else
    echo "Unsupported distro. Aborting."
    return 1
  fi

  echo "Installation complete."
}

setup_git_and_gh() {
  echo "Setting up Git and GitHub CLI..."

  if [[ -f /etc/arch-release ]]; then
    echo "Detected Arch Linux"
    
    # Install git and gh if missing
    if ! pacman -Qi git &>/dev/null; then
      echo "Installing git..."
      sudo pacman -S --needed git
    else
      echo "git already installed."
    fi

    if ! pacman -Qi github-cli &>/dev/null; then
      echo "Installing GitHub CLI (gh)..."
      sudo pacman -S --needed github-cli
    else
      echo "GitHub CLI already installed."
    fi

  elif [[ -f /etc/debian_version ]]; then
    echo "Detected Debian/Ubuntu"
    
    # Install git if missing
    if ! dpkg -s git &>/dev/null; then
      echo "Installing git..."
      sudo apt install -y git
    else
      echo "git already installed."
    fi

    # Install gh if missing
    if ! command -v gh &>/dev/null; then
      echo "Installing GitHub CLI (gh)..."
      type -p curl >/dev/null || sudo apt install curl -y
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
      sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      sudo apt update
      sudo apt install -y gh
    else
      echo "GitHub CLI already installed."
    fi

  else
    echo "Unsupported distro. Aborting."
    return 1
  fi

  # Setup GitHub CLI authentication
  echo ""
  if ! gh auth status &>/dev/null; then
    echo ""
    echo "Setting up GitHub CLI authentication..."
    gh auth login
  else
    echo "GitHub CLI already authenticated."
  fi

  echo "Git and GitHub CLI setup complete."
}

install_tmux_plugins() {
  echo "Installing TPM (Tmux Plugin Manager)..."

  local tpm_dir="$HOME/.tmux/plugins/tpm"

  if [[ ! -d "$tpm_dir" ]]; then
    echo "Cloning TPM..."
    git clone https://github.com/tmux-plugins/tpm "$tpm_dir"
    echo "TPM installed successfully."
    echo "Remember to press 'prefix + I' in tmux to install plugins."
  else
    echo "TPM already installed at $tpm_dir"
  fi
}

clone_dotfiles() {
  echo "Cloning dotfiles repository..."

  local dotfiles_dir="$HOME/dotfiles"

  if [[ ! -d "$dotfiles_dir" ]]; then
    echo "Cloning dotfiles from GitHub..."
    git clone git@github.com:sheikhlimon/dotfiles.git "$dotfiles_dir"
    echo "Dotfiles cloned successfully to $dotfiles_dir"
    echo "You may need to run a setup script or symlink configs manually."
  else
    echo "Dotfiles directory already exists at $dotfiles_dir"
  fi
}

setup_databases() {
  echo "Starting MongoDB and PostgreSQL setup..."

  if [[ -f /etc/arch-release ]]; then
    echo "Detected Arch Linux"

    # Install MongoDB and PostgreSQL if missing
    if ! pacman -Qi mongodb &>/dev/null; then
      echo "Installing MongoDB..."
      sudo pacman -S --needed mongodb
    else
      echo "MongoDB already installed."
    fi

    if ! pacman -Qi postgresql &>/dev/null; then
      echo "Installing PostgreSQL..."
      sudo pacman -S --needed postgresql
    else
      echo "PostgreSQL already installed."
    fi

    # Enable and start MongoDB service
    if ! systemctl is-active --quiet mongod; then
      sudo systemctl enable --now mongod
      echo "MongoDB service started and enabled."
    else
      echo "MongoDB service already running."
    fi

    # Initialize PostgreSQL database if not initialized
    if [[ ! -d /var/lib/postgres/data ]]; then
      echo "Initializing PostgreSQL database..."
      sudo -iu postgres initdb --locale=en_US.UTF-8 -E UTF8 -D /var/lib/postgres/data
    fi

    # Enable and start PostgreSQL service
    if ! systemctl is-active --quiet postgresql; then
      sudo systemctl enable --now postgresql
      echo "PostgreSQL service started and enabled."
    else
      echo "PostgreSQL service already running."
    fi

  elif [[ -f /etc/debian_version ]]; then
    echo "Detected Debian/Ubuntu"

    # Install MongoDB (official packages)
    if ! dpkg -s mongodb-org &>/dev/null; then
      echo "Installing MongoDB..."
      # Add MongoDB repo and key (if not already added)
      if ! grep -q "mongodb-org" /etc/apt/sources.list.d/mongodb-org-*.list 2>/dev/null; then
        wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org.list
        sudo apt update
      fi
      sudo apt install -y mongodb-org
    else
      echo "MongoDB already installed."
    fi

    # Install PostgreSQL
    if ! dpkg -s postgresql &>/dev/null; then
      echo "Installing PostgreSQL..."
      sudo apt install -y postgresql
    else
      echo "PostgreSQL already installed."
    fi

    # Enable and start MongoDB service
    if ! systemctl is-active --quiet mongod; then
      sudo systemctl enable --now mongod
      echo "MongoDB service started and enabled."
    else
      echo "MongoDB service already running."
    fi

    # Enable and start PostgreSQL service
    if ! systemctl is-active --quiet postgresql; then
      sudo systemctl enable --now postgresql
      echo "PostgreSQL service started and enabled."
    else
      echo "PostgreSQL service already running."
    fi

  else
    echo "Unsupported distro. Aborting."
    return 1
  fi

  echo "Database setup complete."
}

ask_and_run() {
  read -rp "$1 [y/N]: " answer
  if [[ "$answer" =~ ^[Yy]$ ]]; then
    echo "Running $2..."
    $2
  else
    echo "Skipping $2."
  fi
  echo
}

post_install() {
  ask_and_run "Install Oh My Zsh + plugins?" install_oh_my_zsh
  ask_and_run "Install CLI support tools?" install_zshrc_support
  ask_and_run "Install desktop apps?" install_my_apps
  ask_and_run "Setup Git and GitHub CLI?" setup_git_and_gh
  ask_and_run "Install TPM (Tmux Plugin Manager)?" install_tmux_plugins
  ask_and_run "Clone dotfiles repository?" clone_dotfiles
  ask_and_run "Setup databases (MongoDB + PostgreSQL)?" setup_databases

  echo "âœ… All done!"

  echo "Restart your shell or run: source ~/.zshrc"
}

# Call the function
post_install
